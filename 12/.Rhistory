}
print(sum(find_stable_state(input)=="#")
n = input[, .N]
input <- fread("input.txt", header=F)[, tstrsplit(V1, "")]
n = input[, .N]
n
m = nchar(input[1,])
m
m = length(input[1,])
m
colnames(input) <- as.character(1:m)
count_neighbors <- function(dt, i, j){
i_neighborhood <- (abs((1:n)-i) <= 1)
j_neighborhood <- (abs((1:m)-j) <= 1)
return(sum(dt[i_neighborhood, ..j_neighborhood] == "#"))
}
evolve_grid <- function(dt){
dt_evolved <- copy(dt)
for(i in 1:n){
for(j in 1:m){
if(dt[i, ..j] == "L" & count_neighbors(dt, i, j) < flo){
dt_evolved[i, (j) := "#"]
}
if(dt[i, ..j] == "#" & count_neighbors(dt, i, j) > tol+1){
dt_evolved[i, (j) := "L"]
}
}
}
return(dt_evolved)
}
find_stable_state <- function(dt){
while(1){
dt_evolved <- evolve_grid(dt)
if(isTRUE(all.equal(dt_evolved, dt))){
return(dt)
}
dt <- copy(dt_evolved)
}
}
print(sum(find_stable_state(input)=="#")
)
input <- fread("input_test.txt", header=F)[, tstrsplit(V1, "")]
require(data.table)
require(itertools)
require(dplyr)
flo = 1
tol = 3
input <- fread("input_test.txt", header=F)[, tstrsplit(V1, "")]
n = input[, .N]
m = length(input[1,])
colnames(input) <- as.character(1:m)
count_neighbors <- function(dt, i, j){
i_neighborhood <- (abs((1:n)-i) <= 1)
j_neighborhood <- (abs((1:m)-j) <= 1)
return(sum(dt[i_neighborhood, ..j_neighborhood] == "#"))
}
evolve_grid <- function(dt){
dt_evolved <- copy(dt)
for(i in 1:n){
for(j in 1:m){
if(dt[i, ..j] == "L" & count_neighbors(dt, i, j) < flo){
dt_evolved[i, (j) := "#"]
}
if(dt[i, ..j] == "#" & count_neighbors(dt, i, j) > tol+1){
dt_evolved[i, (j) := "L"]
}
}
}
return(dt_evolved)
}
find_stable_state <- function(dt){
while(1){
dt_evolved <- evolve_grid(dt)
if(isTRUE(all.equal(dt_evolved, dt))){
return(dt)
}
dt <- copy(dt_evolved)
break
}
}
print(sum(find_stable_state(input)=="#"))
require(data.table)
require(itertools)
require(dplyr)
flo = 1
tol = 3
input <- fread("input_test.txt", header=F)[, tstrsplit(V1, "")]
n = input[, .N]
m = length(input[1,])
colnames(input) <- as.character(1:m)
count_neighbors <- function(dt, i, j){
i_neighborhood <- (abs((1:n)-i) <= 1)
j_neighborhood <- (abs((1:m)-j) <= 1)
return(sum(dt[i_neighborhood, ..j_neighborhood] == "#"))
}
evolve_grid <- function(dt){
dt_evolved <- copy(dt)
for(i in 1:n){
for(j in 1:m){
if(dt[i, ..j] == "L" & count_neighbors(dt, i, j) < flo){
dt_evolved[i, (j) := "#"]
}
if(dt[i, ..j] == "#" & count_neighbors(dt, i, j) > tol+1){
dt_evolved[i, (j) := "L"]
}
}
}
return(dt_evolved)
}
find_stable_state <- function(dt){
while(1){
dt_evolved <- evolve_grid(dt)
if(isTRUE(all.equal(dt_evolved, dt))){
return(dt)
}
dt <- copy(dt_evolved)
}
}
print(sum(find_stable_state(input)=="#"))
require(data.table)
require(itertools)
require(dplyr)
flo = 1
tol = 3
input <- fread("input.txt", header=F)[, tstrsplit(V1, "")]
n = input[, .N]
m = length(input[1,])
colnames(input) <- as.character(1:m)
count_neighbors <- function(dt, i, j){
i_neighborhood <- (abs((1:n)-i) <= 1)
j_neighborhood <- (abs((1:m)-j) <= 1)
return(sum(dt[i_neighborhood, ..j_neighborhood] == "#"))
}
evolve_grid <- function(dt){
dt_evolved <- copy(dt)
for(i in 1:n){
for(j in 1:m){
if(dt[i, ..j] == "L" & count_neighbors(dt, i, j) < flo){
dt_evolved[i, (j) := "#"]
}
if(dt[i, ..j] == "#" & count_neighbors(dt, i, j) > tol+1){
dt_evolved[i, (j) := "L"]
}
}
}
return(dt_evolved)
}
find_stable_state <- function(dt){
while(1){
dt_evolved <- evolve_grid(dt)
if(isTRUE(all.equal(dt_evolved, dt))){
return(dt)
}
dt <- copy(dt_evolved)
}
}
print(sum(find_stable_state(input)=="#"))
input
input[input!="."]
input[input != "."]
input[input == "L"]
input[input == "L"] = A
input[input == "L"] = "A"
input[input == "L"] = "L"
input
input <- as.matrix(fread("input.txt", header=F)[, tstrsplit(V1, "")])
input
diag(input)
row(input)
col(input)-row(input)
input[, .N]
input[, .N]
A[1:3,1:3]
input[1:3,1:3]
count_neighbors <- function(dt, i, j){
i_neighborhood <- (abs((1:n)-i) <= 1)
j_neighborhood <- (abs((1:m)-j) <= 1)
return(sum(dt[i_neighborhood, ..j_neighborhood] == "#"))
}
count_neighbors(input, 1, 1)
count_neighbors <- function(dt, i, j){
i_neighborhood <- (abs((1:n)-i) <= 1)
j_neighborhood <- (abs((1:m)-j) <= 1)
return(sum(dt[i_neighborhood, j_neighborhood] == "#"))
}
count_neighbors(input, 1, 1)
input
input[1]
input
i
input[i, ]
i
input
e_nb <- dt[i, col(dt) > j]
e_nb
dt[i, col(dt) > j]
dt
input
dt = input
input
dt[i, col(dt) > j]
dt
i
j
dt[i, col(dt) > j]
dt
col(dt)
col(dt) > j
dt[i, col(dt) > j]
dt[1, 2]
dt[1, 2:10]
e_nb <- dt[i, col(dt) > j]
dt[i, col(dt) > j]
dt
dt[i, col(dt) > j]
dt[col(dt) > j]
dt[row(dt) = 1 & col(dt) > j]
dt[row(dt) =0 1 & col(dt) > j]
dt[row(dt) == 1 & col(dt) > j]
dt[row(dt) == i & col(dt) > j]
e_nb <- dt[row(dt) == i & col(dt) > j & dt != "."]
e_nb
dt[(row(dt) - col(dt)) == (i-j)]
i
j
i-j
row(dt) - col(dt)
row(dt)+col(dt)
ne_nb <- dt[(row(dt)+col(dt)) == (i+j)]
dt[(row(dt)+col(dt)) == (i+j)]
input
j=3
i=2
j=1
j=77
dt[(row(dt)+col(dt)) == (i+j)]
input[1,3] = "A"
input[1:3]
input[1:3]
input
i=2
j=2
dt[(row(dt)+col(dt)) == (i+j)]
dt=input
dt[(row(dt)+col(dt)) == (i+j)]
require(data.table)
input <- sort(fread("C:/Users/flavi/Desktop/advent/01/input.txt")$V1)
for(k in length(input):1){
i = 1
j = k-1
while(j > i){
target = 2020-input[k]
if(input[i]+input[j]==target){
print(input[i]*input[j]*input[k])
break
}
if(input[i]+input[j]<target){i = i+1}
else {j = j-1}
}
}
require(data.table)
input <- sort(fread("C:/Users/flavi/Desktop/advent/01/input.txt")$V1)
for(k in length(input):1){
i = 1
j = k-1
while(j > i){
target = 2020-input[k]
if(input[i]+input[j]==target){
print(input[i]*input[j]*input[k])
break
}
if(input[i]+input[j]<target){i = i+1}
else {j = j-1}
}
}
require(data.table)
input <- sort(fread("C:/Users/flavi/Desktop/advent/01/input.txt")$V1)
for(k in length(input):1){
i = 1
j = k-1
while(j > i){
target = 2020-input[k]
if(input[i]+input[j]==target){
print(input[i]*input[j]*input[k])
break
}
if(input[i]+input[j]<target){i = i+1}
else {j = j-1}
}
}
solve_day1(input)
require(data.table)
input <- sort(fread("C:/Users/flavi/Desktop/advent/01/input.txt")$V1)
solve_day1 <- function(input) {
for(k in length(input):1){
i = 1
j = k-1
while(j > i){
target = 2020-input[k]
if(input[i]+input[j]==target){
print(input[i]*input[j]*input[k])
break
}
if(input[i]+input[j]<target){i = i+1}
else {j = j-1}
}
}
}
solve_day1(input)
setwd("C:\Users\flavi\Desktop\advent\09")
setwd("C:\\Users\\flavi\\Desktop\\advent\\09")
require(data.table)
require(dplyr)
require(zoo)
input <- as.numeric(readLines("input.txt"))
input
setwd("C:\\Users\\flavi\\Desktop\\advent\\12")
require(data.table)
require(stringr)
require(dplyr)
require(secr)
parse_data <- function(){
dt <- fread("input.txt", header = F)[, c("direction", "amount", "row") :=
.(str_extract(V1, "[A-Z]"), as.numeric(str_extract(V1, "[0-9]+")), .I)]
return(dt)
}
# part 1
substitute_F_with_NSEW <- function(dt){
dt[,c("total_clockwise_angle",
"total_counterclockwise_angle") :=
.(cumsum(ifelse(direction == "R", amount, 0)),
cumsum(ifelse(direction == "L", amount, 0)))]
dt[,total_angle := (total_clockwise_angle-total_counterclockwise_angle)%%360]
direction_having_angle <- c("E", "S", "W", "N")
names(direction_having_angle) = c("0", "90", "180", "270")
dt[, direction := ifelse(direction=="F",
direction_having_angle[[as.character(total_angle)]],
direction), by=row]
return(dt)
}
get_cumulative_ship_distance <- function(dt){
for (cardinal in c("E", "S", "W", "N")){
dt[, (paste0("dx_",cardinal)) := cumsum((ifelse(direction == cardinal, amount, 0)))]
}
return(dt)
}
ans1 <- function(dt){
dt <- parse_data() %>%
substitute_F_with_NSEW() %>%
get_cumulative_ship_distance()
return(dt[.N, abs(dx_N-dx_S) + abs(dx_E-dx_W)])
}
# part 2
compute_waypoint_displacement <- function(dt, waypoint_dx0, waypoint_dy0){
ds = c(waypoint_dx0, waypoint_dy0)
for(i in 1:dt[,.N]){
amount = dt[i, amount]
if(dt[i,direction] == "N"){ds = c(ds[1], ds[2]+amount)}
else if(dt[i,direction] == "S"){ds = c(ds[1], ds[2]-amount)}
else if(dt[i,direction] == "E"){ds = c(ds[1]+amount, ds[2])}
else if(dt[i,direction] == "W"){ds = c(ds[1]-amount, ds[2])}
else if(dt[i,direction] == "R"){ds = rotate(t(c(ds[1], ds[2])), amount)}
else if(dt[i,direction] == "L"){ds = rotate(t(c(ds[1], ds[2])), -amount)}
dt[i, c("waypoint_dx", "waypoint_dy") := .(ds[1], ds[2])]
}
return(dt)
}
compute_ship_displacement <- function(dt){
dt[, ship_dx := cumsum(ifelse(direction == "F", amount*waypoint_dx, 0))]
dt[, ship_dy := cumsum(ifelse(direction == "F", amount*waypoint_dy, 0))]
return(dt)
}
ans2 <- function(dt){
dt <- dt %>%
compute_waypoint_displacement(10, 1) %>%
compute_ship_displacement()
return(dt[.N, abs(ship_dx) + abs(ship_dy)])
}
ans1(parse_data())
ans2(parse_data())
require(data.table)
require(stringr)
require(dplyr)
require(secr)
parse_data <- function(){
dt <- fread("input.txt", header = F)[, c("direction", "amount", "row") :=
.(str_extract(V1, "[A-Z]"), as.numeric(str_extract(V1, "[0-9]+")), .I)]
return(dt)
}
# part 1
substitute_F_with_NSEW <- function(dt){
dt[,c("total_clockwise_angle",
"total_counterclockwise_angle") :=
.(cumsum(ifelse(direction == "R", amount, 0)),
cumsum(ifelse(direction == "L", amount, 0)))]
dt[,total_angle := (total_clockwise_angle-total_counterclockwise_angle)%%360]
direction_having_angle <- c("E", "S", "W", "N")
names(direction_having_angle) = c("0", "90", "180", "270")
dt[, direction := ifelse(direction=="F",
direction_having_angle[[as.character(total_angle)]],
direction), by=row]
return(dt)
}
get_cumulative_ship_distance <- function(dt){
for (cardinal in c("E", "S", "W", "N")){
dt[, (paste0("dx_",cardinal)) := cumsum((ifelse(direction == cardinal, amount, 0)))]
}
return(dt)
}
ans1 <- function(dt){
dt <- parse_data() %>%
substitute_F_with_NSEW() %>%
get_cumulative_ship_distance()
return(dt[.N, abs(dx_N-dx_S) + abs(dx_E-dx_W)])
}
# part 2
compute_waypoint_displacement <- function(dt, waypoint_dx0, waypoint_dy0){
ds = c(waypoint_dx0, waypoint_dy0)
for(i in 1:dt[,.N]){
amount = dt[i, amount]
if(dt[i,direction] == "N"){ds = c(ds[1], ds[2]+amount)}
else if(dt[i,direction] == "S"){ds = c(ds[1], ds[2]-amount)}
else if(dt[i,direction] == "E"){ds = c(ds[1]+amount, ds[2])}
else if(dt[i,direction] == "W"){ds = c(ds[1]-amount, ds[2])}
else if(dt[i,direction] == "R"){ds = rotate(t(c(ds[1], ds[2])), amount)}
else if(dt[i,direction] == "L"){ds = rotate(t(c(ds[1], ds[2])), -amount)}
dt[i, c("waypoint_dx", "waypoint_dy") := .(ds[1], ds[2])]
}
return(dt)
}
compute_ship_displacement <- function(dt){
dt[, ship_dx := cumsum(ifelse(direction == "F", amount*waypoint_dx, 0))]
dt[, ship_dy := cumsum(ifelse(direction == "F", amount*waypoint_dy, 0))]
return(dt)
}
ans2 <- function(dt, dx0, dy0){
dt <- dt %>%
compute_waypoint_displacement(dx0, dy0) %>%
compute_ship_displacement()
return(dt[.N, abs(ship_dx) + abs(ship_dy)])
}
ans1(parse_data())
ans2(parse_data(), dx0 = 10, dy0 = 1)
library(data.table)
library(stringr)
library(R.utils)
options(scipen = 100)
# solution to part 2 uses hashed enviroments
# much faster than named lists!
parse_data <- function(){
n_of_bits <<- 36
input <<- fread("input.txt", header = F)[,.("type" = V1, "value" = V3, "row" = .I)]
input[, mem_address := as.numeric(str_extract(type, "[0-9]+")), row]
input[, type := gsub("mem.*", "mem", type)]
input[type == "mem", value := paste0(paste0(rep("0", n_of_bits-max(nchar(intToBin(value)))), collapse=""), intToBin(value))]
n <<- input[, .N]
}
bin_to_dec <- function(x){
y <- as.numeric(strsplit(x, "")[[1]])
sum(y * 2^rev((seq_along(y)-1)))
}
dec_to_bin <- function(num, length = 35) {
as.character(num %/% (2^(length:0)) %% 2)
}
initialize_mem <- function(){
mem <- rep(list(NA), input[, max(mem_address, na.rm = T)])
return(mem)
}
populate_mem_part1 <- function(mem){
for(i in 1:n){
if(input[i,type] == "mask"){
mask = input[i, strsplit(value,"")]
masked_bits = (1:n_of_bits)[mask != "X"]
} else{
mem[[input[i,mem_address]]] = input[i, strsplit(value,"")]
mem[[input[i,mem_address]]][masked_bits] = mask[masked_bits]
}
}
return(mem)
}
populate_mem_part2 <- function(mem){
for(i in 1:n){
if(input[i,type] == "mask"){
mask = input[i, strsplit(value,"")]
bits_1 = (1:n_of_bits)[mask == 1]
bits_X = (1:n_of_bits)[mask == "X"]
}else{
value <- bin_to_dec(input[i, value])
bin_mem_address <- dec_to_bin(input[i,mem_address])
bin_mem_address[bits_1] <- "1"
all_combinations_of_01 <- expand.grid(rep(list(0:1), length(bits_X)))
for(j in 1:nrow(all_combinations_of_01)){
bin_mem_address[bits_X] = as.character(all_combinations_of_01[j,])
# mem <- modifyList(mem, setNames(list(value), paste0(bin_mem_address, collapse = "")))
mem[[paste0(bin_mem_address, collapse = "")]] = value
}
}
}
return(mem)
}
ans1 <- function(mem){
return(Reduce("+", mem[!is.na(mem)] %>% lapply(t) %>% lapply(paste0, collapse = "") %>% lapply(bin_to_dec)))
}
ans2 <- function(mem){
return(Reduce("+", mget(ls(mem2), envir = mem2)))
}
parse_data()
initialize_mem() %>%
populate_mem_part1 %>%
ans1
populate_mem_part2(new.env(hash = TRUE)) %>%
ans2
